import { Command } from '@/structures/Command'

import { userService } from '@/database/services'
import { UserFlags, UserFlagsString } from '@/database/utils'

import { createActionRow, createButton } from '@/ui/components/common'
import { EmbedUI } from '@/ui/EmbedUI'

import { parseUserMention } from '@/utils'

export default new Command({
    access: {
        user: {
            isDeveloper: true
        }
    },
    messageCommand: {
        style: 'slashCommand'
    },
    async onMessage(message, { args: [grade, userId] }) {
        userId = parseUserMention(userId) ?? userId ?? message.author.id;

        if (!grade) return await message.reply({
            embeds: [
                EmbedUI.createMessage({
                    color: 'red',
                    title: "‚ùå Erreur d'attribution d‚Äôautorit√©",
                    description: "Tu dois pr√©ciser quelle autorit√© retirer, sinon je ne peux rien faire ^^'"
                })
            ]
        });

        const flagName = grade.toUpperCase() as UserFlagsString;
        if (!(flagName in UserFlags)) return await message.reply({
            embeds: [
                EmbedUI.createMessage({
                    color: 'red',
                    title: "‚ùå Erreur d'attribution d‚Äôautorit√©",
                    description: `Je ne connais pas cette autorit√©, voici ceux que je reconnais **${Object.keys(UserFlags).join(', ')}**`
                })
            ]
        });

        const userDatabase = await userService.findOrCreate(userId);
        if (userDatabase.flags.has(flagName)) return await message.reply({
            embeds: [
                EmbedUI.createMessage({
                    color: 'red',
                    title: "‚ùå Erreur d'attribution d‚Äôautorit√©",
                    description: `<@${userId}> \`(${userId})\` poss√®de d√©j√† l‚Äôautorit√© **${flagName}**, donc je ne peux pas lui attribuer ü§î`
                })
            ]
        });

        await userService.update(userId, {
            flags: userDatabase.flags.add(flagName).bitfield
        });

        const msg = await message.reply({
            content: `Parfait, j'ai attribu√© l'autorit√© **${flagName}** √† <@${userId}> \`(${userId})\` !`,
            embeds: [
                EmbedUI.createMessage({
                    color: 'green',
                    title: "‚úÖ Nouvelle autorit√© attribu√©",
                    fields: [
                        {
                            name: 'üîë Autorit√©',
                            value: `\`${flagName}\``,
                        },
                        {
                            name: 'üë§ Utilisateur',
                            value: [
                                `- <@${userId}>`,
                                `- \`${userId}\``
                            ].join('\n'),
                        }
                    ],
                    timestamp: new Date().toISOString(),
                })
            ],
            components: [
                createActionRow([
                    createButton('Pr√©venir en DM', { color: 'blue', customId: 'dm-user' })
                ])
            ]
        });

        const collector = msg.createMessageComponentCollector({
            filter: (i) => i.user.id === message.author.id,
            time: 15_000
        });

        collector.on('collect', async (i) => {
            await i.update({ components: [] });
            await i.followUp({
                content: `J'ai pr√©venu, la personne en DM ! :)`,
            });

            const DM = await this.client.users.createDM(userId);
            if (!DM.isSendable()) return;
            const messages: string[] = [
                `Hey, f√©licitations !! Tu viens d‚Äôobtenir l‚Äôautorit√© **"${flagName}"** :D\n`
            ];

            switch (flagName) {
                case 'STAFF': {
                    messages.push(
                        "üëÆ En tant que **Staff**, tu as d√©sormais les **outils** n√©cessaires pour :",
                        "- Surveiller le serveur et assurer une **bonne ambiance**",
                        "- G√©rer les signalements de **blacklist** et aider les membres"
                    );
                    break;
                }

                case 'BETA': {
                    messages.push(
                        "üß™ En tant que **B√™ta-testeur**, tu as un acc√®s privil√©gi√© qui te permet de :",
                        "- **D√©couvrir** et **utiliser** certaines commandes en **avant-premi√®re**",
                        "- Donner ton **avis** pour m'**am√©liorer**",
                    );
                    break;
                }
            }

            await DM.send({
                embeds: [
                    EmbedUI.createMessage({
                        color: 'purple',
                        title: 'üîë Nouvelle autorit√© d√©bloqu√©e',
                        description: messages.join('\n'),
                        timestamp: new Date().toISOString(),
                    })
                ],
            });
        });


        collector.on('end', async () => {
            return await msg.edit({
                components: []
            });
        });
    }
})